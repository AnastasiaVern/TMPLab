// List
#include "stdafx.h"
#include <iostream>
#include <string>
using namespace std;

struct My_List
{
	My_List *Next = 0;
	int x;
};

class List
{
	My_List *Front;
public:
	List() { Front = new My_List; }
	/*! Push(int _x, int index, My_List &my_list)
	* Функция добавляет элемент в список по заданному индексу
	*/
	void Push(int x, int index)
	{
		My_List *l = new My_List;
		l->x = x;
		if (index == 0) {
			l->Next = Front;
			Front = l;
		}
		else {
			My_List *node = Front;
			if (index > 1) {
				for (int i = 0; i < index - 1; i++) {
					if (node->Next != NULL)
						node = node->Next;
					else {
						My_List *empty = new My_List;
						node->Next = empty;
						node = node->Next;
					}
				}
			}

			My_List *l2= node->Next;
			node->Next = l;
			l->Next = l2;
		}

	}
	/*! Pop(int index, My_List &my_list)
	* Функция удаляет элемент из списка по заданному индексу
	*/
	void Pop(int index)
	{
		if (index == 0) Front = Front->Next;
		else {
			My_List *l = Front;
			if (index > 1) {
				for (int i = 0; i < index - 1; i++)
				{
					l = l->Next;
				}
			}
			My_List *node = l->Next;
			l->Next = node->Next;
			delete node;
		}
	}
	/*! Peek(int index, My_List &my_list)
	* Функция получает значение элемента списка по заданному индексу
	*/
	void Peek(int index)
	{
		My_List *l = Front;
		if (index != 0) {
			for (int i = 0; i < index; i++)
			{
				l = l->Next;
			}
		}
		cout << l->x << endl;
	}
	~List()
	{
		while (Front != NULL)
		{
			My_List *l = Front->Next;
			delete Front;
			Front = l;
		}
	};
};

int main()
{
	int n, index, x;
	List mylist;
	string str;

	cout << "N" << ">>";
	cin >> n;
	cout << endl;
	for (int i = 0; i < n; i++) {
		cin>>str;
		if (str=="add") 
		{ 
			cout << ">>";
			cin >> index >> x;
			mylist.Push(x, index);
		}
		if (str == "del")
		{
			cout << ">>";
			cin >> index;
			mylist.Pop(index); 
		}
		if (str == "get") 
		{
			cout << ">>";
			cin >> index;
			mylist.Peek(index); 
		}
	}
	return 0;
}
